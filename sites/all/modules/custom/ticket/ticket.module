<?php

/**
 * Implements hook_permission().
 */
function ticket_permission() {
  $permissions = array(
    'administer ticket entities' => array(
      'title' => t('Administer ticket entities'),
    ),
    'create ticket entity' => array(
      'title' => t('Create ticket entities'),
    ),
    'view ticket entity' => array(
      'title' => t('View ticket entity'),
    ),
    'edit ticket entity' => array(
      'title' => t('Edit ticket entity'),
    ),
    'delete ticket entity' => array(
      'title' => t('Delete ticket entity'),
    ),
  );
  return $permissions;
}


/**
 * Implements hook_menu().
 */
function ticket_menu() {
  $items['admin/structure/tickets/manage'] = array(
    'title' => 'Tickets',
    'description' => 'Administer Ticket entity type',
    'page callback' => 'ticket_list_entities',
    'access arguments' => array('administer ticket entities'),
  );

  $items['admin/structure/tickets/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/tickets/manage/add'] = array(
    'title' => 'Add a Ticket',
    'page callback' => 'ticket_add',
    'access arguments' => array('create ticket entity'),
    'type' => MENU_LOCAL_ACTION,
  );

  // Add example entities.
  //$items['ticket/get'] = array(
  //  'title' => 'Request a ticket',
  //  'page callback' => 'ticket_get',
  //  'access arguments' => array('create ticket entity'),
  //);

  $items['ticket/%ticket'] = array(
    'title callback' => 'ticket_title',
    'title arguments' => array(1),
    'page callback' => 'ticket_view',
    'page arguments' => array(1),
    'access arguments' => array('view ticket entity'),
  );

    // 'View' tab for an individual entity page.
  $items['ticket/%ticket/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['ticket/%ticket/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ticket_form', 1),
    'access arguments' => array('edit ticket entity'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['ticket/%ticket/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ticket_delete_form', 1),
    'access arguments' => array('delete ticket entity'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


function ticket_entity_info() {
  $info['ticket'] = array(
    'label' => t('Ticket'),
    'controller class' => 'TicketController',
    'base table' => 'ticket',
    'uri callback' => 'ticket_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'tid' ,
    ),
    'bundle keys' => array(
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'ticket' => array(
        'label' => 'Standard Ticket',
        'admin' => array(
          'path' => 'admin/structure/tickets/manage',
          'access arguments' => array('administer ticket entities'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
      ),
      'short' => array(
        'label' => t('Short'),
      ),
    ),
  );

  return $info;
}

function ticket_field_extra_fields() {
  $form_elements['seats'] = array(
    'label' => t('Number of seats'),
    'weight' => 0,
  );

  $form_elements['created'] = array(
    'label' => t('Number of seats'),
    'weight' => 0,
  );

  $display_elements['seats'] = array(
    'label' => t('Number of seats'),
    'weight' => 0,
  );

  $display_elements['created'] = array(
    'label' => t('Date create'),
    'weight' => 0,
  );

  $extra_fields['ticket']['ticket']['form'] = $form_elements;
  $extra_fields['ticket']['ticket']['display'] = $display_elements;

  return $extra_fields;
}

function ticket_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = ticket_load_multiple();

  $destination = drupal_get_destination();

  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id' => $entity->tid,
          'seats' => $entity->seats,
          'operations' => array(
            'data' => array(
              '#type' => 'link',
              '#title' => t('edit'),
              '#href' => "ticket/$entity->tid/edit",
              '#options' => array('query' => $destination)
            )
          ),
        ),
      );
    }

    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Num of Seats'), t('Operations')),
    );
  }

  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('There are no tickets.'),
    );
  }

  return $content;
}

function ticket_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $tickets = ticket_load_multiple($ids, array(), $reset);
  return $tickets ? reset($tickets) : FALSE;
}

function ticket_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('ticket', $ids, $conditions, $reset);
}

function ticket_save(&$entity) {
  return entity_get_controller('ticket')->save($entity);
}

function ticket_uri($ticket) {
  return array(
    'path' => 'ticket/' . $ticket->tid,
  );
}

function ticket_add() {
  $entity = entity_get_controller('ticket')->create();
  return drupal_get_form('ticket_form', $entity);
}

function ticket_form($form, &$form_state, $entity) {

  $form['seats'] = array(
    '#type' => 'textfield',
    '#title' => t('Seats'),
    '#required' => TRUE,
    '#default_value' => $entity->seats,
  );

  $form['#entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form_state['ticket'] = $entity;

  field_attach_form('ticket', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );

  return $form;
}

//ticket_form_validate
function ticket_form_validate($form, &$form_state) {
  field_attach_form_validate('ticket', $form_state['ticket'], $form, $form_state);
}

//ticket_form_submit
function ticket_form_submit($form, &$form_state) {
  $entity = $form_state['ticket'];

  entity_form_submit_build_entity('ticket', $entity, $form, $form_state);
  
  if (isset($entity->is_new) && $entity->is_new == TRUE) {
    $is_new = TRUE;
  } else {
    $is_new = FALSE;
    $tid = $entity->tid;
  }

  $entity = ticket_save($entity);

  if ($is_new == FALSE) {
    $form_state['redirect'] = url('ticket/' . $tid);
  }


  // $form_state['redirect'] = 'examples/entity_example/basic/' . $entity->basic_id;
  // $form_state['redirect'] = 'admin/structure/tickets/manage';
}

function ticket_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
}


function ticket_view($entity, $view_mode = 'full') {
  // Our entity type, for convenience.
  $entity_type = 'ticket';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->tid => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->tid => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  $entity->content['seats'] = array(
    '#type' => 'item',
    '#title' => t('Seats'),
    '#markup' => $entity->seats,
  );

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('ticket_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}
